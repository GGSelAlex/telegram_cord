import telebot
import os
import requests
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# ==== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ====
BOT_TOKEN = os.getenv("BOT_TOKEN")
NOWPAYMENTS_API_KEY = os.getenv("NOWPAYMENTS_API_KEY")
ADMIN_IDS = [int(i) for i in os.getenv("ADMIN_IDS").split(",")]

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ==== –ú–ï–ù–Æ ====
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üß≥ –í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω"), KeyboardButton("üïí –í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è"))
    kb.add(KeyboardButton("‚ôø –Ü–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å"), KeyboardButton("ü™ñ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è"))
    return kb

def back_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é"))
    kb.add(KeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è"), KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ USDT (TRC20)"))
    return kb

# ==== START ====
@bot.message_handler(commands=['start'])
def start(msg):
    user = msg.from_user
    for admin in ADMIN_IDS:
        bot.send_message(admin, f"üë§ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user.username} (ID: {user.id})")
    welcome = (
        "üëã –í—ñ—Ç–∞—î–º–æ —É *Kovalova Stanislava ‚Äî –Æ—Ä–∏–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –¥–ª—è —á–æ–ª–æ–≤—ñ–∫—ñ–≤*\n\n"
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ:\n"
        "üîπ –í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω\n"
        "üîπ –í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó\n"
        "üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ\n"
        "üîπ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑—ñ —Å–ª—É–∂–±–∏ –≤ –ó–°–£\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –ø–æ—Å–ª—É–≥—É üëá"
    )
    bot.send_message(msg.chat.id, welcome, reply_markup=main_menu(), parse_mode="Markdown")

# ==== –ü–û–°–õ–£–ì–ò ====
@bot.message_handler(func=lambda msg: msg.text == "üß≥ –í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω")
def abroad(msg):
    text = (
        "üåç *–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω*\n\n"
        "–ú–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ –ª–µ–≥–∞–ª—å–Ω–æ –≤–∏—ó—Ö–∞—Ç–∏ –∑–∞ –º–µ–∂—ñ –£–∫—Ä–∞—ó–Ω–∏.\n\n"
        "üìÑ –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ:\n"
        "‚Ä¢ –¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
        "‚Ä¢ –í–õ–ö\n"
        "‚Ä¢ –î–æ–≤—ñ–¥–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –≤–∏—ó–∑–¥—É\n\n"
        "‚è±Ô∏è –¢–µ—Ä–º—ñ–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: 5‚Äì7 –¥–Ω—ñ–≤."
    )
    bot.send_message(msg.chat.id, text, parse_mode="Markdown", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: msg.text == "üïí –í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è")
def deferment(msg):
    text = (
        "üìë *–í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó*\n\n"
        "–û—Ç—Ä–∏–º–∞–π—Ç–µ –æ—Ñ—ñ—Ü—ñ–π–Ω—É –≤—ñ–¥—Å—Ç—Ä–æ—á–∫—É –Ω–∞ —Ä—ñ–∫ –ø–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è.\n\n"
        "üìÑ –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ:\n"
        "‚Ä¢ –¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
        "‚Ä¢ –î–æ–≤—ñ–¥–∫–∞ (–≤—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ —Ä—ñ–∫)\n"
        "‚Ä¢ –í–õ–ö\n\n"
        "‚è±Ô∏è –¢–µ—Ä–º—ñ–Ω: 3‚Äì5 –¥–Ω—ñ–≤."
    )
    bot.send_message(msg.chat.id, text, parse_mode="Markdown", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: msg.text == "‚ôø –Ü–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å")
def disability(msg):
    text = (
        "‚ôø *–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ*\n\n"
        "–ü–µ—Ä–µ–≤–∞–≥–∏:\n"
        "‚Ä¢ –í—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –≤—ñ–¥ —Å–ª—É–∂–±–∏\n"
        "‚Ä¢ –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –≥–∞—Ä–∞–Ω—Ç—ñ—ó\n"
        "‚Ä¢ –ü–µ–Ω—Å—ñ–π–Ω—ñ –≤–∏–ø–ª–∞—Ç–∏\n\n"
        "üìÑ –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ:\n"
        "‚Ä¢ –õ–õ–ö\n"
        "‚Ä¢ –î–æ–≤—ñ–¥–∫—É –ï–ö–û–ü–§ (–ú–°–ï–ö)\n"
        "‚Ä¢ –ü—Ä–∞–≤–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é\n\n"
        "‚è±Ô∏è –¢–µ—Ä–º—ñ–Ω: 14‚Äì18 –¥–Ω—ñ–≤."
    )
    bot.send_message(msg.chat.id, text, parse_mode="Markdown", reply_markup=back_menu())

@bot.message_handler(func=lambda msg: msg.text == "ü™ñ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è")
def release(msg):
    text = (
        "ü™ñ *–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑—ñ —Å–ª—É–∂–±–∏ –≤ –ó–°–£*\n\n"
        "–î–æ–ø–æ–º–∞–≥–∞—î–º–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –Ω–∞ –∑–∞–∫–æ–Ω–Ω–∏—Ö –ø—ñ–¥—Å—Ç–∞–≤–∞—Ö.\n\n"
        "üìÑ –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ:\n"
        "‚Ä¢ –í–∏—Ç—è–≥ –∑ –Ω–∞–∫–∞–∑—É\n"
        "‚Ä¢ –¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
        "‚Ä¢ –í–õ–ö\n\n"
        "‚è±Ô∏è –¢–µ—Ä–º—ñ–Ω: 7‚Äì10 –¥–Ω—ñ–≤."
    )
    bot.send_message(msg.chat.id, text, parse_mode="Markdown", reply_markup=back_menu())

# ==== –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø ====
@bot.message_handler(func=lambda msg: msg.text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
def consult(msg):
    bot.send_message(
        msg.chat.id,
        "üìû –î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞–ø–∏—à—ñ—Ç—å —é—Ä–∏—Å—Ç—É –Ω–∞–ø—Ä—è–º—É:\nüëâ @Kovalova_Stanislava"
    )

# ==== –û–ü–õ–ê–¢–ê USDT TRC20 ====
@bot.message_handler(func=lambda msg: msg.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ USDT (TRC20)")
def pay(msg):
    amount_usd = 50
    payload = {
        "price_amount": amount_usd,
        "price_currency": "usd",
        "pay_currency": "usdttrc20",  # <<<<<<<<<< USDT TRC20 !!!
        "ipn_callback_url": "https://—Ç–≤—ñ–π-–¥–æ–º–µ–Ω.onrender.com/ipn",
        "order_id": str(msg.chat.id),
        "order_description": "–û–ø–ª–∞—Ç–∞ —é—Ä–∏–¥–∏—á–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó"
    }
    headers = {"x-api-key": NOWPAYMENTS_API_KEY, "Content-Type": "application/json"}
    r = requests.post("https://api.nowpayments.io/v1/payment", json=payload, headers=headers)
    data = r.json()
    if "invoice_url" in data:
        text = (
            f"üí∞ –°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: {amount_usd} USDT (TRC20)\n"
            f"üîó –û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑: {data['invoice_url']}\n\n"
            "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –ø–ª–∞—Ç—ñ–∂ ‚úÖ"
        )
        bot.send_message(msg.chat.id, text)
    else:
        bot.send_message(msg.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: {data}")

# ==== CALLBACK –í–Ü–î NOWPAYMENTS ====
@app.route("/ipn", methods=["POST"])
def ipn():
    data = request.json
    if data.get("payment_status") == "finished":
        user_id = int(data.get("order_id"))
        bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–æ! –Æ—Ä–∏—Å—Ç –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        for admin in ADMIN_IDS:
            bot.send_message(admin, f"üí∏ –û—Ç—Ä–∏–º–∞–Ω–æ –æ–ø–ª–∞—Ç—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    return "OK", 200

# ==== –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ====
@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ —É –º–µ–Ω—é")
def back(msg):
    bot.send_message(msg.chat.id, "üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ==== –ó–ê–ü–£–°–ö ====
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
