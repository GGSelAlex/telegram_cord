import os
import requests
import telebot
from flask import Flask, request
import shelve
import sys 
from requests.exceptions import RequestException, HTTPError

# =========================
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# =========================
TOKEN = os.getenv("BOT_TOKEN")
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è BOT_TOKEN, ADMIN1_ID, ETH_BSC_API_KEY –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
bot = telebot.TeleBot(TOKEN) 
ADMIN_IDS = [int(os.getenv("ADMIN1_ID", 0)), int(os.getenv("ADMIN2_ID", 0))]
TELEGRAM_LAWYER_USERNAME = os.getenv("LAWYER_USERNAME", "your_lawyer_username") # <-- –ó–ú–Ü–ù–Ü–¢–¨ –ù–ê –†–ï–ê–õ–¨–ù–ò–ô USERNAME –Æ–†–ò–°–¢–ê

# –ì–∞–º–∞–Ω—Ü—ñ
WALLETS = {
    "TRC20": "TT2BVxXgZuMbspJM2DTuntnTetnY5e8ntF",
    "BSC": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5",
    "ETH": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5"
}
ETH_BSC_API_KEY = os.getenv("ETH_BSC_API_KEY")

# –ù–∞–∑–≤–∏ DB –¥–ª—è shelve (–¥–ª—è —Å—Ç—ñ–π–∫–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è)
HASH_DB_NAME = 'processed_hashes'
USER_STATE_DB_NAME = 'user_states' 

# –ü–æ—Å–ª—É–≥–∏
SERVICES = {
    "–í–ò–á–ó–î": {"text": "–ë—ñ–ª–∏–π –∫–≤–∏—Ç–æ–∫: –í–∞—à –®–ª—è—Ö –¥–æ –°–≤–æ–±–æ–¥–∏ —Ç–∞ –°–ø–æ–∫–æ—é\n–ü–æ–≤–Ω–∞ –ª–µ–≥–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–∏—ó–∑–¥—É –∑–∞ –∫–æ—Ä–¥–æ–Ω.",
               "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –Ω–∞ –≤–∏—ó–∑–¥"]},
    "–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨": {"text": "–ì—Ä—É–ø–∞ –Ü–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ: –í–∞—à–µ –ü—Ä–∞–≤–æ –Ω–∞ –ó–∞—Ö–∏—Å—Ç —Ç–∞ –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ì–∞—Ä–∞–Ω—Ç—ñ—ó",
                     "docs": ["–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –ï–ö–û–ü–§ (–ú–°–ï–ö)", "–ü—Ä–∞–≤–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é"]},
    "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø": {"text": "–û—Ç—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ –≥–æ–¥ —Ä–æ–±–∏–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 3-5 –¥–Ω—ñ–≤ –ø–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è (–í–õ–ö). –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏—Å—è –ø–æ –£–∫—Ä–∞—ó–Ω—ñ.",
                        "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–î–æ–≤—ñ–¥–∫–∞ (–≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∫)", "–í–õ–ö"]},
    "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø": {"text": "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ –ø–æ–≤–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –ó–°–£.",
                    "docs": ["–ü–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è", "–í–õ–ö", "–†–∞–ø–æ—Ä—Ç–∏ —Ç–∞ –∫–ª–æ–ø–æ—Ç–∞–Ω–Ω—è"]}
}

# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGES = {
    "START_WELCOME": (
        "*Kovalova Stanislava: –í–∞—à —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É —Å–∫–ª–∞–¥–Ω–∏—Ö —Ä—ñ—à–µ–Ω–Ω—è—Ö.*\n"
        "–í—ñ—Ç–∞—î–º–æ –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ, –¥–µ –∑–∞–∫–æ–Ω –ø—Ä–∞—Ü—é—î –Ω–∞ –≤–∞—à –∑–∞—Ö–∏—Å—Ç.\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–ø–æ–Ω—É—î –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ —Å—É–ø—Ä–æ–≤–æ–¥—É:\n"
        "üîπ *–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å*: –ü–æ–≤–Ω–∞ —Ç–∞ –±–µ–∑—É–º–æ–≤–Ω–∞.\n"
        "üîπ *–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ—Å—Ç—å*: –í—ñ–¥ –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.\n"
        "üîπ *–†–µ–∑—É–ª—å—Ç–∞—Ç*: –ß—ñ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –≤–∞—à–æ—ó –±–µ–∑–ø–µ–∫–∏."
    ),
    "MAIN_MENU_RETURN": "‚úÖ –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ *–ì–æ–ª–æ–≤–Ω–æ–≥–æ –ú–µ–Ω—é*. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá",
    "SERVICES_MENU": "–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–¥ –ø–æ—Å–ª—É–≥–∏:",
    "CONSULTATION_MENU": (
        "üí¨ *–ü–µ—Ä–≤–∏–Ω–Ω–∞ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å, —è–∫ –í–∞–º –∑—Ä—É—á–Ω—ñ—à–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç:"
    ),
    "PREMIUM": (
        "üöÄ *PREMIUM –Æ–†–ò–î–ò–ß–ù–ò–ô –°–£–ü–†–û–í–Ü–î*\n\n"
        "–¶–µ–π –ø–∞–∫–µ—Ç –≤–∫–ª—é—á–∞—î 100% –≥–∞—Ä–∞–Ω—Ç—ñ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–∞ –ø–æ–≤–Ω–∏–π –∑–∞—Ö–∏—Å—Ç.\n"
        "‚Ä¢ –û—Å–æ–±–∏—Å—Ç–∏–π —é—Ä–∏—Å—Ç 24/7.\n"
        "‚Ä¢ –°—É–ø—Ä–æ–≤—ñ–¥ –Ω–∞ –í–õ–ö (–∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ).\n"
        "‚Ä¢ –ï–∫—Å—Ç—Ä–µ–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (1 –¥–µ–Ω—å).\n"
        "‚Ä¢ –í—Å—ñ –¥–µ—Ä–∂–∞–≤–Ω—ñ –º–∏—Ç–∞ —Ç–∞ –∑–±–æ—Ä–∏ –≤–∫–ª—é—á–µ–Ω—ñ.\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é."
    ),
    "NETWORK_CHOICE": "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ 1 USDT:",
    
    # –ù–û–í–Ü –®–ê–ë–õ–û–ù–ò –î–õ–Ø –ê–î–ú–Ü–ù-–°–ü–û–í–Ü–©–ï–ù–¨
    "ADMIN_NEW_USER": "–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_link} (ID: `{chat_id}`)",
    "ADMIN_PAID_SUCCESS": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_link} —Å–ø–ª–∞—Ç–∏–≤ 1 USDT {network}. TX: `{tx_hash}`",
    "ADMIN_PAID_INVALID": "‚ö†Ô∏è –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê –°–£–ú–ê/–ê–î–†–ï–°–ê ({network}) –≤—ñ–¥ {user_link}. TX: `{tx_hash}`",
    "ADMIN_PAID_UNCONFIRMED": "‚ö†Ô∏è –ù–ï–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ê {network} –≤—ñ–¥ {user_link}. TX: `{tx_hash}`",
    "ADMIN_NEW_CONSULT_TEXT": "üî• –ù–û–í–ò–ô –ó–ê–ü–ò–¢ –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ –≤—ñ–¥ {user_link} (ID: `{chat_id}`):\n\n{query}",
    "ADMIN_NEW_CONSULT_VOICE": "üî• –ù–û–í–ò–ô –ì–û–õ–û–°–û–í–ò–ô –ó–ê–ü–ò–¢ –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ –≤—ñ–¥ {user_link} (ID: `{chat_id}`)",
}

# Flask
app = Flask(__name__)


# =========================
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# =========================
def notify_admin(text):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–≤ Markdown)."""
    for admin_id in ADMIN_IDS:
        if admin_id != 0:
            try:
                bot.send_message(admin_id, text, parse_mode="Markdown")
            except telebot.apihelper.ApiException:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")

def get_user_link(message):
    """–°—Ç–≤–æ—Ä—é—î Markdown-–ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    chat_id = message.chat.id
    first_name = message.from_user.first_name or f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id}"
    return f"[{first_name}](tg://user?id={chat_id})"

def show_main_menu_inline(chat_id, text=MESSAGES["MAIN_MENU_RETURN"], message_id=None):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î/—Ä–µ–¥–∞–≥—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ inline-–∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    btn_services = telebot.types.InlineKeyboardButton("‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏", callback_data="show_services_menu")
    btn_consultation = telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="show_consultation")
    btn_premium = telebot.types.InlineKeyboardButton("üåü Premium –°—É–ø—Ä–æ–≤—ñ–¥", callback_data="show_premium")

    markup.add(btn_services, btn_consultation, btn_premium)
    
    if message_id:
        bot.edit_message_text(text, chat_id, message_id, parse_mode="Markdown", reply_markup=markup)
    else:
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
        
        # –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ù–ï–í–ò–î–ò–ú–û–ì–û –°–ò–ú–í–û–õ–ê '\u200b' –ó–ê–ú–Ü–°–¢–¨ –ö–†–ê–ü–ö–ò
        try:
            bot.send_message(chat_id, "\u200b", reply_markup=telebot.types.ReplyKeyboardRemove())
        except Exception:
            pass


def send_services_category_menu(chat_id, message_id):
    """–†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å–ª—É–≥ –∑ INLINE-–∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = telebot.types.InlineKeyboardMarkup(row_width=2) 
    markup.row(
        telebot.types.InlineKeyboardButton("–í–ò–á–ó–î", callback_data="service_–í–ò–á–ó–î"),
        telebot.types.InlineKeyboardButton("–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø", callback_data="service_–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨", callback_data="service_–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨"),
        telebot.types.InlineKeyboardButton("–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø", callback_data="service_–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø")
    )
    markup.row(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ", callback_data="back_to_main_menu"))
    
    bot.edit_message_text(MESSAGES["SERVICES_MENU"], chat_id, message_id, reply_markup=markup)


def send_service_details(chat_id, service_name, message_id):
    """–†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–æ—Å–ª—É–≥—É –∑ INLINE-–∫–Ω–æ–ø–∫–∞–º–∏."""
    service = SERVICES[service_name]
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    
    btn_consultation = telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="show_consultation")
    btn_payment = telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ USDT", callback_data="start_usdt_payment")
    btn_back_to_services = telebot.types.InlineKeyboardButton("üîô –î–æ –ø–æ—Å–ª—É–≥", callback_data="show_services_menu")
    btn_back_to_main = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ", callback_data="back_to_main_menu")
    
    markup.row(btn_consultation, btn_payment)
    markup.row(btn_back_to_services, btn_back_to_main)
    
    doc_text = "\n".join([f"‚Ä¢ {d}" for d in service["docs"]])
    full_text = f"*{service_name}*\n\n{service['text']}\n\n*–î–æ–∫—É–º–µ–Ω—Ç–∏:*\n{doc_text}"
    
    bot.edit_message_text(full_text, chat_id, message_id, parse_mode="Markdown", reply_markup=markup)


def send_network_choice_menu(chat_id, message_id):
    """–†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ INLINE-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ."""
    markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    
    markup.row(
        telebot.types.InlineKeyboardButton("TRC20", callback_data="network_TRC20"),
        telebot.types.InlineKeyboardButton("BSC", callback_data="network_BSC"),
        telebot.types.InlineKeyboardButton("ETH", callback_data="network_ETH")
    )
    markup.row(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ", callback_data="back_to_main_menu"))

    bot.edit_message_text(MESSAGES["NETWORK_CHOICE"], chat_id, message_id, reply_markup=markup)


# =========================
# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ —Å—Ç–∞—Ä—Ç—É
# =========================
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_link = get_user_link(message)
    
    with shelve.open(USER_STATE_DB_NAME) as db:
        if str(chat_id) in db:
            del db[str(chat_id)]
        
    show_main_menu_inline(chat_id, text=MESSAGES["START_WELCOME"])
    notify_admin(MESSAGES["ADMIN_NEW_USER"].format(user_link=user_link, chat_id=chat_id))


# =========================
# –û–±—Ä–æ–±–Ω–∏–∫–∏ Inline-–∫–Ω–æ–ø–æ–∫ (–ú–æ–¥—É–ª—å–Ω—ñ)
# =========================
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main_menu")
def handle_back_to_main(call):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É."""
    chat_id = call.message.chat.id
    
    bot.answer_callback_query(call.id)
    with shelve.open(USER_STATE_DB_NAME) as db:
        if str(chat_id) in db:
            del db[str(chat_id)]
        
    show_main_menu_inline(chat_id, message_id=call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("show_") or call.data == "start_usdt_payment" or call.data == "consultation_direct_to_bot")
def handle_main_options(call):
    """–û–±—Ä–æ–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –æ–ø—Ü—ñ–π: –ü–æ—Å–ª—É–≥–∏, –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è, Premium, –û–ø–ª–∞—Ç–∞."""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data
    
    bot.answer_callback_query(call.id)
        
    if data == "show_services_menu":
        send_services_category_menu(chat_id, message_id)
        
    elif data == "show_consultation":
        # –ú–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        
        btn_direct = telebot.types.InlineKeyboardButton(
            "–ù–∞–ø–∏—Å–∞—Ç–∏ –Æ—Ä–∏—Å—Ç—É –ù–∞–ø—Ä—è–º—É üìù", 
            url=f"https://t.me/{TELEGRAM_LAWYER_USERNAME}"
        )
        btn_bot = telebot.types.InlineKeyboardButton(
            "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ó–∞–ø–∏—Ç –ë–æ—Ç—É (–¢–µ–∫—Å—Ç/–ì–æ–ª–æ—Å) üì•", 
            callback_data="consultation_direct_to_bot"
        )
        markup.add(btn_direct, btn_bot)
        
        bot.edit_message_text(
            MESSAGES["CONSULTATION_MENU"], 
            chat_id, 
            message_id, 
            parse_mode="Markdown", 
            reply_markup=markup
        )
        
    elif data == "consultation_direct_to_bot":
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á—ñ–∫—É—î –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
        with shelve.open(USER_STATE_DB_NAME) as db:
            db[str(chat_id)] = "AWAITING_CONSULTATION" 
        
        bot.edit_message_text(
            "*‚úÖ –ì–æ—Ç–æ–≤–æ!*\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Ç—É—Ç. –Ø–∫ —Ç—ñ–ª—å–∫–∏ –í–∏ –Ω–∞–¥—ñ—à–ª–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—Ä–∏–º–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n\n_–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –º–∏ –æ—á—ñ–∫—É—î–º–æ —Å–∞–º–µ –í–∞—à –∑–∞–ø–∏—Ç, –∞ –Ω–µ '–ü—Ä–∏–≤—ñ—Ç'._",
            chat_id, 
            message_id, 
            parse_mode="Markdown", 
            reply_markup=None
        )
        
    elif data == "show_premium":
        # –ë–õ–û–ö –î–õ–Ø PREMIUM
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)

        btn_direct = telebot.types.InlineKeyboardButton(
            "–ù–∞–ø–∏—Å–∞—Ç–∏ –Æ—Ä–∏—Å—Ç—É –ù–∞–ø—Ä—è–º—É üìù", 
            url=f"https://t.me/{TELEGRAM_LAWYER_USERNAME}"
        )
        btn_back = telebot.types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ", 
            callback_data="back_to_main_menu"
        )

        markup.add(btn_direct, btn_back)
        
        bot.edit_message_text(
            MESSAGES["PREMIUM"], 
            chat_id, 
            message_id, 
            parse_mode="Markdown", 
            reply_markup=markup 
        )
        
    elif data == "start_usdt_payment":
        send_network_choice_menu(chat_id, message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def handle_service_selection(call):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏."""
    service_name = call.data.split("_")[1]
    bot.answer_callback_query(call.id)
    send_service_details(call.message.chat.id, service_name, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("network_"))
def handle_network_selection(call):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ –¥–ª—è –æ–ø–ª–∞—Ç–∏."""
    chat_id = call.message.chat.id
    network = call.data.split("_")[1]
    
    bot.answer_callback_query(call.id)
    
    # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–µ—Ä–µ–∂—ñ –≤ —Å—Ç—ñ–π–∫–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
    with shelve.open(USER_STATE_DB_NAME) as db:
        db[str(chat_id)] = network
        
    wallet = WALLETS[network]
    
    text = f"üí≥ –û–ø–ª–∞—Ç–∞ 1 USDT —á–µ—Ä–µ–∑ {network}\n–ê–¥—Ä–µ—Å–∞: `{wallet}`\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–æ—Ç—É TX Hash –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
    
    bot.edit_message_text(call.message.text, chat_id, call.message.message_id, reply_markup=None)
    
    bot.send_message(chat_id, text, parse_mode="Markdown")


# =========================
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TX Hash (–ù–ê–î–Ü–ô–ù–Ü–°–¢–¨)
# =========================
@bot.message_handler(func=lambda m: m.text.startswith("0x") or m.text.startswith("T"))
def check_tx_hash(message):
    tx_hash = message.text.strip()
    chat_id = message.chat.id
    user_link = get_user_link(message)
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ DB
    with shelve.open(USER_STATE_DB_NAME) as db:
        network = db.get(str(chat_id))

    if not network or network not in WALLETS:
        bot.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    with shelve.open(HASH_DB_NAME) as db:
        if tx_hash in db:
            bot.send_message(chat_id, "‚ö†Ô∏è –¶—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ.")
            return

    # –ó–∞–≥–∞–ª—å–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
    positive_client_msg = "‚úÖ –ß—É–¥–æ–≤–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –í–∞—à —Ö–µ—à-–∫–æ–¥. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º –∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω."
    
    try:
        # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TRC20 (Tronscan)
        if network == "TRC20":
            url = f"https://apilist.tronscan.org/api/transaction-info?hash={tx_hash}"
            response = requests.get(url, timeout=10)
            response.raise_for_status() 
            resp = response.json()
            
            confirmed = resp.get("ret", [{}])[0].get("contractRet") == "SUCCESS"
            
            if confirmed:
                to_address = resp.get("to")
                amount = int(resp.get("contractData", {}).get("amount", 0)) / 1_000_000
                
                if to_address == WALLETS["TRC20"] and amount == 1:
                    with shelve.open(HASH_DB_NAME) as db:
                        db[tx_hash] = chat_id
                    with shelve.open(USER_STATE_DB_NAME) as db:
                        if str(chat_id) in db:
                            del db[str(chat_id)]
                        
                    bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ 1 USDT TRC20 –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏.")
                    notify_admin(MESSAGES["ADMIN_PAID_SUCCESS"].format(user_link=user_link, network="TRC20", tx_hash=tx_hash))
                    
                    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –¥—ñ—ó
                    show_main_menu_inline(chat_id) 
                else:
                    # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –∞–ª–µ –¥–∞–Ω—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è (–ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ä—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
                    bot.send_message(chat_id, positive_client_msg)
                    notify_admin(MESSAGES["ADMIN_PAID_INVALID"].format(user_link=user_link, network="TRC20", tx_hash=tx_hash))
            else:
                # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ä—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
                bot.send_message(chat_id, positive_client_msg)
                notify_admin(MESSAGES["ADMIN_PAID_UNCONFIRMED"].format(user_link=user_link, network="TRC20", tx_hash=tx_hash))
        
        # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ BSC/ETH (BscScan/Etherscan)
        else:
            url = f"https://api.bscscan.com/api?module=transaction&action=gettxreceiptstatus&txhash={tx_hash}&apikey={ETH_BSC_API_KEY}" if network == "BSC" else \
                  f"https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash={tx_hash}&apikey={ETH_BSC_API_KEY}"
            
            response = requests.get(url, timeout=10)
            response.raise_for_status() 
            resp = response.json()
            
            result = resp.get("result")
            status = result.get("status") if isinstance(result, dict) else result
            
            if status == "1":
                with shelve.open(HASH_DB_NAME) as db:
                    db[tx_hash] = chat_id
                with shelve.open(USER_STATE_DB_NAME) as db:
                    if str(chat_id) in db:
                        del db[str(chat_id)]
                        
                bot.send_message(chat_id, f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {tx_hash} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ {network}! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏.")
                notify_admin(MESSAGES["ADMIN_PAID_SUCCESS"].format(user_link=user_link, network=network, tx_hash=tx_hash))
                
                # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –¥—ñ—ó
                show_main_menu_inline(chat_id)
            else:
                # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ä—É—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
                bot.send_message(chat_id, positive_client_msg)
                notify_admin(MESSAGES["ADMIN_PAID_UNCONFIRMED"].format(user_link=user_link, network=network, tx_hash=tx_hash))
                
    except HTTPError as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {network} (Status {e.response.status_code}): {e}"
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤'—è–∑–∫—É –∑ API-—Å–µ—Ä–≤—ñ—Å–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ TX Hash.")
        notify_admin(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API {network} –≤—ñ–¥ {user_link}. HTTP Error: {e.response.status_code}")
    except RequestException as e:
        error_message = f"‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ {network}: {e}"
        bot.send_message(chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –º–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        notify_admin(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ {network} –≤—ñ–¥ {user_link}. Error: {e}")
    except Exception as e:
        error_message = f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ TX Hash –¥–ª—è {network}: {e}"
        bot.send_message(chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
        notify_admin(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ {network} –≤—ñ–¥ {user_link}. Error: {e}")

        
# =========================
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
# =========================
@bot.message_handler(func=lambda m: True, content_types=['text', 'voice', 'photo', 'document'])
def handle_consultation_request(message):
    chat_id = message.chat.id
    user_link = get_user_link(message)
    
    with shelve.open(USER_STATE_DB_NAME) as db:
        current_state = db.get(str(chat_id))

    if current_state != "AWAITING_CONSULTATION":
        # –Ø–∫—â–æ —Å—Ç–∞–Ω –Ω–µ –æ—á—ñ–∫—É—î –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö
        handle_unknown_messages(message)
        return

    # –õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    if message.content_type == 'text':
        query = message.text
        notify_admin(MESSAGES["ADMIN_NEW_CONSULT_TEXT"].format(user_link=user_link, chat_id=chat_id, query=query))
        
    elif message.content_type == 'voice':
        notify_admin(MESSAGES["ADMIN_NEW_CONSULT_VOICE"].format(user_link=user_link, chat_id=chat_id))
        # –ù–û–í–ï: –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –í–°–Ü–ú –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            if admin_id != 0:
                try:
                    bot.forward_message(admin_id, chat_id, message.message_id)
                except telebot.apihelper.ApiException:
                    pass
    
    else: # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤/—ñ–Ω—à–æ–≥–æ –º–µ–¥—ñ–∞
        notify_admin(f"üî• –ù–û–í–ò–ô –ó–ê–ü–ò–¢ –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ (–î–û–ö–£–ú–ï–ù–¢/–§–û–¢–û) –≤—ñ–¥ {user_link} (ID: `{chat_id}`)")
        # –ù–û–í–ï: –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –º–µ–¥—ñ–∞—Ñ–∞–π–ª –í–°–Ü–ú –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            if admin_id != 0:
                try:
                    bot.forward_message(admin_id, chat_id, message.message_id) 
                except telebot.apihelper.ApiException:
                    pass

    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
    bot.send_message(chat_id, "–î—è–∫—É—î–º–æ! –í–∞—à –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    with shelve.open(USER_STATE_DB_NAME) as db:
        if str(chat_id) in db:
            del db[str(chat_id)]
            
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    show_main_menu_inline(chat_id)


# =========================
# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (UX)
# =========================
@bot.message_handler(func=lambda m: True)
def handle_unknown_messages(message):
    chat_id = message.chat.id
    
    with shelve.open(USER_STATE_DB_NAME) as db:
        current_state = db.get(str(chat_id))
    
    if current_state in ["TRC20", "BSC", "ETH"]:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—á—ñ–∫—É—é TX Hash –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏. –Ø–∫—â–æ –≤–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.")
    elif current_state == "AWAITING_CONSULTATION":
        # –¶–µ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ handle_consultation_request, –∞–ª–µ —Ç—É—Ç –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
        pass 
    else:
        show_main_menu_inline(chat_id, text="–Ø –≤–∞—Å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:")

        
# =========================
# Flask webhook (–Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
# =========================
@app.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    return "Bot is running via webhook", 200

# =========================
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é)
# =========================
if __name__ == "__main__":
    if not TOKEN:
        print("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        sys.exit(1)
    if ADMIN_IDS[0] == 0:
        print("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ó–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è ADMIN1_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î 0. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å.")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
