import os
import requests
from flask import Flask, request
import telebot

# =========================
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
# =========================
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

ADMIN_IDS = [
    int(os.getenv("ADMIN1_ID", 0)),
    int(os.getenv("ADMIN2_ID", 0))
]

# –ì–∞–º–∞–Ω—Ü—ñ
WALLETS = {
    "TRC20": "TT2BVxXgZuMbspJM2DTuntnTetnY5e8ntF",
    "BSC": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5",
    "ETH": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5"
}

ETH_BSC_API_KEY = os.getenv("ETH_BSC_API_KEY")

# –ü–æ—Å–ª—É–≥–∏
SERVICES = {
    "–í–ò–á–ó–î": {
        "text": "–ë—ñ–ª–∏–π –∫–≤–∏—Ç–æ–∫: –í–∞—à –®–ª—è—Ö –¥–æ –°–≤–æ–±–æ–¥–∏ —Ç–∞ –°–ø–æ–∫–æ—é\n–ü–æ–≤–Ω–∞ –ª–µ–≥–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–∏—ó–∑–¥—É –∑–∞ –∫–æ—Ä–¥–æ–Ω.",
        "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –Ω–∞ –≤–∏—ó–∑–¥"]
    },
    "–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨": {
        "text": "–ì—Ä—É–ø–∞ –Ü–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ: –í–∞—à–µ –ü—Ä–∞–≤–æ –Ω–∞ –ó–∞—Ö–∏—Å—Ç —Ç–∞ –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ì–∞—Ä–∞–Ω—Ç—ñ—ó",
        "docs": ["–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –ï–ö–û–ü–§ (–ú–°–ï–ö)", "–ü—Ä–∞–≤–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é"]
    },
    "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø": {
        "text": "–û—Ç—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ –≥–æ–¥ —Ä–æ–±–∏–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 3-5 –¥–Ω—ñ–≤ –ø–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è (–í–õ–ö). –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏—Å—è –ø–æ –£–∫—Ä–∞—ó–Ω—ñ.",
        "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–î–æ–≤—ñ–¥–∫–∞ (–≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∫)", "–í–õ–ö"]
    },
    "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø": {
        "text": "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ –ø–æ–≤–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –ó–°–£.",
        "docs": ["–ü–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è", "–í–õ–ö", "–†–∞–ø–æ—Ä—Ç–∏ —Ç–∞ –∫–ª–æ–ø–æ—Ç–∞–Ω–Ω—è"]
    }
}

# Flask
app = Flask(__name__)

# =========================
# –§—É–Ω–∫—Ü—ñ—ó
# =========================
def notify_admin(text):
    for admin_id in ADMIN_IDS:
        if admin_id != 0:
            bot.send_message(admin_id, text)

def send_service_details(chat_id, service_name):
    service = SERVICES[service_name]
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", url="https://t.me/uristcord")
    )
    markup.add(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    doc_text = "\n".join([f"‚Ä¢ {d}" for d in service["docs"]])
    full_text = f"*{service_name}*\n\n{service['text']}\n\n*–î–æ–∫—É–º–µ–Ω—Ç–∏:*\n{doc_text}"
    bot.send_message(chat_id, full_text, parse_mode="Markdown", reply_markup=markup)

# =========================
# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
# =========================
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏", "–û–ø–ª–∞—Ç–∞ USDT")
    markup.row("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
    welcome_text = (
        "üíº *–Æ—Ä–∏–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏ Kovalova Stanislava*\n\n"
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –ø—Ä–µ–º—ñ—É–º —é—Ä–∏–¥–∏—á–Ω–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ.\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ üëá"
    )
    bot.send_message(chat_id, welcome_text, parse_mode="Markdown", reply_markup=markup)
    notify_admin(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ /start: {chat_id} ({message.from_user.first_name})")

# =========================
# –ü–æ—Å–ª—É–≥–∏
# =========================
@bot.message_handler(func=lambda m: m.text == "‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏")
def services_handler(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–í–ò–á–ó–î", "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø")
    markup.row("–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨", "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(
        message.chat.id,
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ:\n"
        "üîπ –í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω\n"
        "üîπ –í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó\n"
        "üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ\n"
        "üîπ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑—ñ —Å–ª—É–∂–±–∏ –≤ –ó–°–£",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text in SERVICES.keys())
def service_handler(message):
    send_service_details(message.chat.id, message.text)

# =========================
# –û–ø–ª–∞—Ç–∞ USDT
# =========================
@bot.message_handler(func=lambda m: m.text == "–û–ø–ª–∞—Ç–∞ USDT")
def choose_network(message):
    chat_id = message.chat.id
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("TRC20", "BSC", "ETH")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ 1 USDT:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["TRC20", "BSC", "ETH"])
def send_wallet_info(message):
    chat_id = message.chat.id
    network = message.text
    wallet = WALLETS[network]
    amount = 1
    text = (
        f"üí≥ –û–ø–ª–∞—Ç–∞ {amount} USDT —á–µ—Ä–µ–∑ {network}\n\n"
        f"–ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É:\n`{wallet}`\n\n"
        "–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±–æ—Ç—É TX Hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
    )
    bot.send_message(chat_id, text, parse_mode="Markdown")

# =========================
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TX Hash
# =========================
@bot.message_handler(func=lambda m: m.text.startswith("0x") or m.text.startswith("T"))
def check_tx_hash(message):
    tx_hash = message.text.strip()
    chat_id = message.chat.id

    # TRC20
    if tx_hash.startswith("T"):
        url = f"https://apilist.tronscan.org/api/transaction-info?hash={tx_hash}"
        try:
            resp = requests.get(url).json()
            to_address = resp.get("to")
            amount = int(resp.get("contractData", {}).get("amount", 0)) / 1_000_000
            confirmed = resp.get("ret", [{}])[0].get("contractRet") == "SUCCESS"
            if confirmed and to_address == WALLETS["TRC20"] and amount == 1:
                bot.send_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} USDT TRC20 –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
                notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} —Å–ø–ª–∞—Ç–∏–≤ {amount} USDT TRC20. TX: {tx_hash}")
            else:
                bot.send_message(chat_id, f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ TRC20: {e}")

    # BSC / ETH
    elif tx_hash.startswith("0x"):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ä–µ–∂—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º BSC
        chain_id = 56
        network_name = "BSC"
        url = f"https://api.etherscan.io/v2/api?chainid={chain_id}&module=proxy&action=eth_getTransactionByHash&txhash={tx_hash}&apikey={ETH_BSC_API_KEY}"
        try:
            resp = requests.get(url).json()
            tx = resp.get("result")
            if not isinstance(tx, dict):
                bot.send_message(chat_id, "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π")
                return
            to_address = tx.get("to", "").lower()
            value = int(tx.get("value", "0"), 16) / 1e6
            if to_address == WALLETS[network_name].lower() and value == 1:
                bot.send_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ {value} USDT {network_name} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
                notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} —Å–ø–ª–∞—Ç–∏–≤ {value} USDT {network_name}. TX: {tx_hash}")
            else:
                bot.send_message(chat_id, f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ {network_name}: {e}")

# =========================
# Flask webhook
# =========================
@app.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os
