import os
import requests
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import telebot

# =========================
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
# =========================
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

ADMIN_IDS = [
    int(os.getenv("ADMIN1_ID", "0")),
    int(os.getenv("ADMIN2_ID", "0"))
]

NOWPAYMENTS_API_KEY = os.getenv("NOWPAYMENTS_API_KEY")
IPN_SECRET = os.getenv("IPN_SECRET")

# =========================
# –ü–æ—Å–ª—É–≥–∏
# =========================
SERVICES = {
    "–í–ò–á–ó–î": {
        "text": "–ë—ñ–ª–∏–π –∫–≤–∏—Ç–æ–∫: –í–∞—à –®–ª—è—Ö –¥–æ –°–≤–æ–±–æ–¥–∏ —Ç–∞ –°–ø–æ–∫–æ—é\n–í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–æ–≤–Ω—É –ª–µ–≥–∞–ª—å–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –¥–ª—è –≤–∏—ó–∑–¥—É –∑–∞ –∫–æ—Ä–¥–æ–Ω.",
        "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –Ω–∞ –≤–∏—ó–∑–¥"]
    },
    "–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨": {
        "text": "–ì—Ä—É–ø–∞ –Ü–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ: –í–∞—à–µ –ü—Ä–∞–≤–æ –Ω–∞ –ó–∞—Ö–∏—Å—Ç —Ç–∞ –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ì–∞—Ä–∞–Ω—Ç—ñ—ó",
        "docs": ["–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –ï–ö–û–ü–§ (–ú–°–ï–ö)", "–ü—Ä–∞–≤–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é"]
    },
    "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø": {
        "text": "–û—Ç—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ —Ä—ñ–∫ —Ä–æ–±–∏–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 3-5 –¥–Ω—ñ–≤ –ø–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è (–í–õ–ö). –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏—Å—è –ø–æ –£–∫—Ä–∞—ó–Ω—ñ.",
        "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–î–æ–≤—ñ–¥–∫–∞ (–≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∫)", "–í–õ–ö"]
    },
    "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø": {
        "text": "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ –ø–æ–≤–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –ó–°–£.",
        "docs": ["–ü–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è", "–í–õ–ö", "–†–∞–ø–æ—Ä—Ç–∏ —Ç–∞ –∫–ª–æ–ø–æ—Ç–∞–Ω–Ω—è"]
    }
}

# =========================
# Flask —Å–µ—Ä–≤–µ—Ä
# =========================
app = Flask(__name__)

def notify_admin(text):
    for admin_id in ADMIN_IDS:
        if admin_id != 0:
            bot.send_message(admin_id, text)

def send_service_details(chat_id, service_name):
    service = SERVICES[service_name]
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", url="https://t.me/uristcord"),
        telebot.types.InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ 1 USDT", callback_data="pay_usdt"),
        telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )
    doc_text = "\n".join([f"‚Ä¢ {d}" for d in service["docs"]])
    full_text = f"*{service_name}*\n\n{service['text']}\n\n*–î–æ–∫—É–º–µ–Ω—Ç–∏, —è–∫—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ:*\n{doc_text}"
    bot.send_message(chat_id, full_text, parse_mode="Markdown", reply_markup=markup)

# =========================
# Webhook
# =========================
@app.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")
    return "Bot is running via webhook", 200

# =========================
# IPN –¥–ª—è –æ–ø–ª–∞—Ç–∏
# =========================
@app.route("/ipn", methods=["POST"])
def ipn():
    secret = request.headers.get("X-IPN-Secret")
    if secret != IPN_SECRET:
        return jsonify({"status": "unauthorized"}), 403

    data = request.json
    user_id = data.get("order_id")
    status = data.get("payment_status")
    currency = data.get("pay_currency")
    amount = data.get("price_amount")

    if status == "finished" and user_id:
        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} {currency} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É.")
        notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø–ª–∞—Ç–∏–≤ {amount} {currency}")
        return jsonify({"status": "ok"}), 200
    return jsonify({"status": "failed"}), 400

# =========================
# –ö–æ–º–∞–Ω–¥–∏
# =========================
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏", "üïí –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.row("‚ÑπÔ∏è –ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é", "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")

    welcome_text = (
        "üíº *–Æ—Ä–∏–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏ Kovalova Stanislava*\n\n"
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –ø—Ä–µ–º—ñ—É–º —é—Ä–∏–¥–∏—á–Ω–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ.\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ üëá"
    )
    bot.send_message(chat_id, welcome_text, parse_mode="Markdown", reply_markup=markup)
    notify_admin(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ /start: {chat_id} ({message.from_user.first_name})")

# =========================
# –û—Å–Ω–æ–≤–Ω—ñ –±–ª–æ–∫–∏
# =========================
@bot.message_handler(func=lambda m: m.text == "‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏")
def services_handler(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–í–ò–á–ó–î", "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø")
    markup.row("–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨", "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(
        message.chat.id,
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ:\n"
        "üîπ –í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω\n"
        "üîπ –í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó\n"
        "üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ\n"
        "üîπ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑—ñ —Å–ª—É–∂–±–∏ –≤ –ó–°–£",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text in SERVICES.keys())
def service_handler(message):
    send_service_details(message.chat.id, message.text)

# =========================
# Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ Inline
# =========================
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "back":
        services_handler(call.message)
    elif call.data == "pay_usdt":
        create_nowpayments_invoice(call.message)

# =========================
# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É NowPayments
# =========================
def create_nowpayments_invoice(message):
    chat_id = message.chat.id
    amount = 1
    currency = "usdttrc20"

    headers = {"x-api-key": NOWPAYMENTS_API_KEY, "Content-Type": "application/json"}
    payload = {
        "price_amount": amount,
        "price_currency": currency,
        "pay_currency": currency,
        "order_id": str(chat_id),
        "order_description": "–û–ø–ª–∞—Ç–∞ —é—Ä–∏–¥–∏—á–Ω–∏—Ö –ø–æ—Å–ª—É–≥",
        "success_url": f"https://t.me/{bot.get_me().username}",
        "cancel_url": f"https://t.me/{bot.get_me().username}"
    }

    try:
        response = requests.post("https://api.nowpayments.io/v1/payment", json=payload, headers=headers)
        data = response.json()
        payment_url = data.get("invoice_url")

        if payment_url:
            bot.send_message(chat_id, f"üí≥ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç–∏ üëá\n{payment_url}")
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–ª–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# =========================
# –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
# =========================
@bot.message_handler(func=lambda m: m.text == "üïí –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
def consult(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True),
        telebot.types.KeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ —é—Ä–∏—Å—Ç—É"),
        telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    bot.send_message(
        message.chat.id,
        "üìû –î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é ‚Äî –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —é—Ä–∏—Å—Ç—É:",
        reply_markup=markup
    )

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    contact = message.contact.phone_number
    bot.send_message(message.chat.id, f"–î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: {contact}")
    notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {contact} (ID: {message.chat.id})")

# =========================
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# =========================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
