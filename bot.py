import os
import requests
import telebot
from flask import Flask, request
import shelve
from requests.exceptions import RequestException, HTTPError

# =========================
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# =========================
TOKEN = os.getenv("BOT_TOKEN")
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è BOT_TOKEN, ADMIN1_ID, ETH_BSC_API_KEY –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
bot = telebot.TeleBot(TOKEN) 
ADMIN_IDS = [int(os.getenv("ADMIN1_ID", 0)), int(os.getenv("ADMIN2_ID", 0))]

# –ì–∞–º–∞–Ω—Ü—ñ
WALLETS = {
    "TRC20": "TT2BVxXgZuMbspJM2DTuntnTetnY5e8ntF",
    "BSC": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5",
    "ETH": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5"
}
ETH_BSC_API_KEY = os.getenv("ETH_BSC_API_KEY")

# –ü–æ—Å–ª—É–≥–∏
SERVICES = {
    "–í–ò–á–ó–î": {"text": "–ë—ñ–ª–∏–π –∫–≤–∏—Ç–æ–∫: –í–∞—à –®–ª—è—Ö –¥–æ –°–≤–æ–±–æ–¥–∏ —Ç–∞ –°–ø–æ–∫–æ—é\n–ü–æ–≤–Ω–∞ –ª–µ–≥–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–∏—ó–∑–¥—É –∑–∞ –∫–æ—Ä–¥–æ–Ω.",
               "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –Ω–∞ –≤–∏—ó–∑–¥"]},
    "–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨": {"text": "–ì—Ä—É–ø–∞ –Ü–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ: –í–∞—à–µ –ü—Ä–∞–≤–æ –Ω–∞ –ó–∞—Ö–∏—Å—Ç —Ç–∞ –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ì–∞—Ä–∞–Ω—Ç—ñ—ó",
                     "docs": ["–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –ï–ö–û–ü–§ (–ú–°–ï–ö)", "–ü—Ä–∞–≤–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é"]},
    "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø": {"text": "–û—Ç—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ –≥–æ–¥ —Ä–æ–±–∏–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 3-5 –¥–Ω—ñ–≤ –ø–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è (–í–õ–ö). –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏—Å—è –ø–æ –£–∫—Ä–∞—ó–Ω—ñ.",
                        "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–î–æ–≤—ñ–¥–∫–∞ (–≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∫)", "–í–õ–ö"]},
    "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø": {"text": "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ –ø–æ–≤–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –ó–°–£.",
                    "docs": ["–ü–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è", "–í–õ–ö", "–†–∞–ø–æ—Ä—Ç–∏ —Ç–∞ –∫–ª–æ–ø–æ—Ç–∞–Ω–Ω—è"]}
}

# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
MESSAGES = {
    "START_WELCOME": (
        "*Kovalova Stanislava: –í–∞—à —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É —Å–∫–ª–∞–¥–Ω–∏—Ö —Ä—ñ—à–µ–Ω–Ω—è—Ö.*\n"
        "–í—ñ—Ç–∞—î–º–æ –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ, –¥–µ –∑–∞–∫–æ–Ω –ø—Ä–∞—Ü—é—î –Ω–∞ –≤–∞—à –∑–∞—Ö–∏—Å—Ç.\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–ø–æ–Ω—É—î –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ —Å—É–ø—Ä–æ–≤–æ–¥—É:\n"
        "üîπ *–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å*: –ü–æ–≤–Ω–∞ —Ç–∞ –±–µ–∑—É–º–æ–≤–Ω–∞.\n"
        "üîπ *–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ—Å—Ç—å*: –í—ñ–¥ –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.\n"
        "üîπ *–†–µ–∑—É–ª—å—Ç–∞—Ç*: –ß—ñ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –≤–∞—à–æ—ó –±–µ–∑–ø–µ–∫–∏."
    ),
    "MAIN_MENU_RETURN": "‚úÖ –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ *–ì–æ–ª–æ–≤–Ω–æ–≥–æ –ú–µ–Ω—é*. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª üëá",
    "SERVICES_MENU": "–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–¥ –ø–æ—Å–ª—É–≥–∏:",
    "CONSULTATION": "üí¨ –î–ª—è *–ø–µ—Ä–≤–∏–Ω–Ω–æ—ó* –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ —Å–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É. –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –í–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
    "PREMIUM": (
        "üöÄ *PREMIUM –Æ–†–ò–î–ò–ß–ù–ò–ô –°–£–ü–†–û–í–Ü–î*\n\n"
        "–¶–µ–π –ø–∞–∫–µ—Ç –≤–∫–ª—é—á–∞—î 100% –≥–∞—Ä–∞–Ω—Ç—ñ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–∞ –ø–æ–≤–Ω–∏–π –∑–∞—Ö–∏—Å—Ç.\n"
        "‚Ä¢ –û—Å–æ–±–∏—Å—Ç–∏–π —é—Ä–∏—Å—Ç 24/7.\n"
        "‚Ä¢ –°—É–ø—Ä–æ–≤—ñ–¥ –Ω–∞ –í–õ–ö (–∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ).\n"
        "‚Ä¢ –ï–∫—Å—Ç—Ä–µ–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (1 –¥–µ–Ω—å).\n"
        "‚Ä¢ –í—Å—ñ –¥–µ—Ä–∂–∞–≤–Ω—ñ –º–∏—Ç–∞ —Ç–∞ –∑–±–æ—Ä–∏ –≤–∫–ª—é—á–µ–Ω—ñ.\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é."
    ),
    "HOTLINE": (
        "üìû *–ì–ê–†–ê–ù–¢–û–í–ê–ù–ê –ì–ê–†–Ø–ß–ê –õ–Ü–ù–Ü–Ø 24/7*\n\n"
        "–û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä—è–º–∏–π –∑–≤'—è–∑–æ–∫ –∑ —é—Ä–∏—Å—Ç–æ–º –¥–ª—è –µ–∫—Å—Ç—Ä–µ–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π. –î–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ —Ä–æ–∑–ø–æ—á–∞–ª–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é.\n\n"
        "–î–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ì–∞—Ä—è—á–æ—ó –õ—ñ–Ω—ñ—ó, –æ–±–µ—Ä—ñ—Ç—å *'Premium –°—É–ø—Ä–æ–≤—ñ–¥'* –∞–±–æ —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑ –æ–¥–Ω–∏–º —ñ–∑ –ø–∞–∫–µ—Ç—ñ–≤ –ø–æ—Å–ª—É–≥."
    ),
    "NETWORK_CHOICE": "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ 1 USDT:",
}

# Flask —Ç–∞ –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—É RAM –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –∞–ª–µ –∫—Ä–∞—â–µ Redis/shelve)
app = Flask(__name__)
user_network_choice = {}  # chat_id -> –º–µ—Ä–µ–∂–∞
HASH_DB_NAME = 'processed_hashes'


# =========================
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# =========================
def notify_admin(text):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    for admin_id in ADMIN_IDS:
        if admin_id != 0:
            try:
                bot.send_message(admin_id, text)
            except telebot.apihelper.ApiException:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")

def show_main_menu_inline(chat_id, text=MESSAGES["MAIN_MENU_RETURN"], message_id=None):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î/—Ä–µ–¥–∞–≥—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ inline-–∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    btn_services = telebot.types.InlineKeyboardButton("‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏", callback_data="show_services_menu")
    btn_consultation = telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="show_consultation")
    btn_premium = telebot.types.InlineKeyboardButton("üåü Premium –°—É–ø—Ä–æ–≤—ñ–¥", callback_data="show_premium")
    btn_hotline = telebot.types.InlineKeyboardButton("üìû –ì–∞—Ä—è—á–∞ –õ—ñ–Ω—ñ—è 24/7", callback_data="show_hotline")
    
    markup.add(btn_services, btn_consultation, btn_premium, btn_hotline)
    
    if message_id:
        bot.edit_message_text(text, chat_id, message_id, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)
        # –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        try:
            bot.send_message(chat_id, ".", reply_markup=telebot.types.ReplyKeyboardRemove())
        except Exception:
            pass

def send_services_category_menu(chat_id, message_id):
    """–†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å–ª—É–≥ –∑ INLINE-–∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = telebot.types.InlineKeyboardMarkup(row_width=2) 
    markup.row(
        telebot.types.InlineKeyboardButton("–í–ò–á–ó–î", callback_data="service_–í–ò–á–ó–î"),
        telebot.types.InlineKeyboardButton("–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø", callback_data="service_–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨", callback_data="service_–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨"),
        telebot.types.InlineKeyboardButton("–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø", callback_data="service_–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø")
    )
    markup.row(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ", callback_data="back_to_main_menu"))
    
    bot.edit_message_text(MESSAGES["SERVICES_MENU"], chat_id, message_id, reply_markup=markup)


def send_service_details(chat_id, service_name, message_id):
    """–†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–æ—Å–ª—É–≥—É –∑ INLINE-–∫–Ω–æ–ø–∫–∞–º–∏."""
    service = SERVICES[service_name]
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    
    btn_consultation = telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="show_consultation")
    btn_payment = telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ USDT", callback_data="start_usdt_payment")
    btn_back_to_services = telebot.types.InlineKeyboardButton("üîô –î–æ –ø–æ—Å–ª—É–≥", callback_data="show_services_menu")
    btn_back_to_main = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ", callback_data="back_to_main_menu")
    
    markup.row(btn_consultation, btn_payment)
    markup.row(btn_back_to_services, btn_back_to_main)
    
    doc_text = "\n".join([f"‚Ä¢ {d}" for d in service["docs"]])
    full_text = f"*{service_name}*\n\n{service['text']}\n\n*–î–æ–∫—É–º–µ–Ω—Ç–∏:*\n{doc_text}"
    
    bot.edit_message_text(full_text, chat_id, message_id, parse_mode="Markdown", reply_markup=markup)


def send_network_choice_menu(chat_id, message_id):
    """–†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ INLINE-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ."""
    markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    
    markup.row(
        telebot.types.InlineKeyboardButton("TRC20", callback_data="network_TRC20"),
        telebot.types.InlineKeyboardButton("BSC", callback_data="network_BSC"),
        telebot.types.InlineKeyboardButton("ETH", callback_data="network_ETH")
    )
    markup.row(telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ", callback_data="back_to_main_menu"))

    bot.edit_message_text(MESSAGES["NETWORK_CHOICE"], chat_id, message_id, reply_markup=markup)


# =========================
# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ —Å—Ç–∞—Ä—Ç—É
# =========================
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    if chat_id in user_network_choice:
        del user_network_choice[chat_id]
        
    show_main_menu_inline(chat_id, text=MESSAGES["START_WELCOME"])
    notify_admin(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {chat_id} ({message.from_user.first_name})")


# =========================
# –û–±—Ä–æ–±–Ω–∏–∫–∏ Inline-–∫–Ω–æ–ø–æ–∫ (–ú–æ–¥—É–ª—å–Ω—ñ)
# =========================
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main_menu")
def handle_back_to_main(call):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É."""
    chat_id = call.message.chat.id
    
    bot.answer_callback_query(call.id)
    if chat_id in user_network_choice:
        del user_network_choice[chat_id]
        
    show_main_menu_inline(chat_id, message_id=call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("show_") or call.data == "start_usdt_payment")
def handle_main_options(call):
    """–û–±—Ä–æ–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –æ–ø—Ü—ñ–π: –ü–æ—Å–ª—É–≥–∏, –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è, Premium, –ì–∞—Ä—è—á–∞ –õ—ñ–Ω—ñ—è, –û–ø–ª–∞—Ç–∞."""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    data = call.data
    
    bot.answer_callback_query(call.id)
        
    if data == "show_services_menu":
        send_services_category_menu(chat_id, message_id)
        
    elif data == "show_consultation":
        bot.edit_message_text(MESSAGES["CONSULTATION"], chat_id, message_id, parse_mode="Markdown", reply_markup=None)
        
    elif data == "show_premium":
        bot.edit_message_text(MESSAGES["PREMIUM"], chat_id, message_id, parse_mode="Markdown", reply_markup=None)

    elif data == "show_hotline":
        bot.edit_message_text(MESSAGES["HOTLINE"], chat_id, message_id, parse_mode="Markdown", reply_markup=None)
        
    elif data == "start_usdt_payment":
        send_network_choice_menu(chat_id, message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def handle_service_selection(call):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏."""
    service_name = call.data.split("_")[1]
    bot.answer_callback_query(call.id)
    send_service_details(call.message.chat.id, service_name, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("network_"))
def handle_network_selection(call):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ –¥–ª—è –æ–ø–ª–∞—Ç–∏."""
    chat_id = call.message.chat.id
    network = call.data.split("_")[1]
    
    bot.answer_callback_query(call.id)
    user_network_choice[chat_id] = network
    wallet = WALLETS[network]
    
    text = f"üí≥ –û–ø–ª–∞—Ç–∞ 1 USDT —á–µ—Ä–µ–∑ {network}\n–ê–¥—Ä–µ—Å–∞: `{wallet}`\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–æ—Ç—É TX Hash –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
    
    # –í–∏–¥–∞–ª—è—î–º–æ inline-–∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é —Ö–µ—à—É
    bot.edit_message_text(call.message.text, chat_id, call.message.message_id, reply_markup=None)
    
    bot.send_message(chat_id, text, parse_mode="Markdown")


# =========================
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TX Hash (–ù–ê–î–Ü–ô–ù–Ü–°–¢–¨)
# =========================
@bot.message_handler(func=lambda m: m.text.startswith("0x") or m.text.startswith("T"))
def check_tx_hash(message):
    tx_hash = message.text.strip()
    chat_id = message.chat.id
    network = user_network_choice.get(chat_id)

    if not network:
        bot.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
        return
        
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π —Ö–µ—à —É —Å—Ö–æ–≤–∏—â—ñ
    with shelve.open(HASH_DB_NAME) as db:
        if tx_hash in db:
            bot.send_message(chat_id, "‚ö†Ô∏è –¶—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∂–µ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ.")
            return

    try:
        # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TRC20 (Tronscan)
        if network == "TRC20":
            url = f"https://apilist.tronscan.org/api/transaction-info?hash={tx_hash}"
            response = requests.get(url, timeout=10)
            response.raise_for_status() # –ü—ñ–¥–Ω—ñ–º–µ HTTPError
            resp = response.json()
            
            confirmed = resp.get("ret", [{}])[0].get("contractRet") == "SUCCESS"
            
            if confirmed:
                to_address = resp.get("to")
                amount = int(resp.get("contractData", {}).get("amount", 0)) / 1_000_000
                
                if to_address == WALLETS["TRC20"] and amount == 1:
                    with shelve.open(HASH_DB_NAME) as db:
                        db[tx_hash] = chat_id
                        
                    bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ 1 USDT TRC20 –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏.")
                    notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} —Å–ø–ª–∞—Ç–∏–≤ 1 USDT TRC20. TX: {tx_hash}")
                    del user_network_choice[chat_id] 
                else:
                    bot.send_message(chat_id, "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –∞–ª–µ –¥–∞–Ω—ñ (–∞–¥—Ä–µ—Å–∞/—Å—É–º–∞) –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è.")
            else:
                bot.send_message(chat_id, "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–±–æ –Ω–µ –≤–¥–∞–ª–∞—Å—è.")
        
        # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ BSC/ETH (BscScan/Etherscan)
        else:
            url = f"https://api.bscscan.com/api?module=transaction&action=gettxreceiptstatus&txhash={tx_hash}&apikey={ETH_BSC_API_KEY}" if network == "BSC" else \
                  f"https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash={tx_hash}&apikey={ETH_BSC_API_KEY}"
            
            response = requests.get(url, timeout=10)
            response.raise_for_status() 
            resp = response.json()
            
            result = resp.get("result")
            status = result.get("status") if isinstance(result, dict) else result
            
            if status == "1":
                with shelve.open(HASH_DB_NAME) as db:
                    db[tx_hash] = chat_id
                    
                bot.send_message(chat_id, f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {tx_hash} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ {network}! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏.")
                notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} —Å–ø–ª–∞—Ç–∏–≤ 1 USDT {network}. TX: {tx_hash}")
                del user_network_choice[chat_id] 
            else:
                bot.send_message(chat_id, f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ {network}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                
    # 2. –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    except HTTPError as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {network} (Status {e.response.status_code}): {e}"
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤'—è–∑–∫—É –∑ API-—Å–µ—Ä–≤—ñ—Å–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ TX Hash.")
        notify_admin(error_message)
    except RequestException as e:
        error_message = f"‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ {network}: {e}"
        bot.send_message(chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –º–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        notify_admin(error_message)
    except Exception as e:
        error_message = f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ TX Hash –¥–ª—è {network}: {e}"
        bot.send_message(chat_id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
        notify_admin(error_message)

        
# =========================
# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (UX)
# =========================
@bot.message_handler(func=lambda m: True)
def handle_unknown_messages(message):
    chat_id = message.chat.id
    
    if chat_id in user_network_choice:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—á—ñ–∫—É—é TX Hash –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏. –Ø–∫—â–æ –≤–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.")
    else:
        show_main_menu_inline(chat_id, text="–Ø –≤–∞—Å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:")

        
# =========================
# Flask webhook (–Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
# =========================
@app.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    return "Bot is running via webhook", 200

# =========================
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# =========================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
