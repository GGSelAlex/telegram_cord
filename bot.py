import os
import requests
from flask import Flask, request
import telebot

# =========================
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
# =========================
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
ADMIN_IDS = [int(os.getenv("ADMIN1_ID", 0)), int(os.getenv("ADMIN2_ID", 0))]

# –ì–∞–º–∞–Ω—Ü—ñ
WALLETS = {
    "TRC20": "TT2BVxXgZuMbspJM2DTuntnTetnY5e8ntF",
    "BSC": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5",
    "ETH": "0xc8872cac097911Bfa3203d5c9225c4CdE2A882B5"
}
ETH_BSC_API_KEY = os.getenv("ETH_BSC_API_KEY")

# –ü–æ—Å–ª—É–≥–∏
SERVICES = {
    "–í–ò–á–ó–î": {"text": "–ë—ñ–ª–∏–π –∫–≤–∏—Ç–æ–∫: –í–∞—à –®–ª—è—Ö –¥–æ –°–≤–æ–±–æ–¥–∏ —Ç–∞ –°–ø–æ–∫–æ—é\n–ü–æ–≤–Ω–∞ –ª–µ–≥–∞–ª—å–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≤–∏—ó–∑–¥—É –∑–∞ –∫–æ—Ä–¥–æ–Ω.",
               "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –Ω–∞ –≤–∏—ó–∑–¥"]},
    "–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨": {"text": "–ì—Ä—É–ø–∞ –Ü–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ: –í–∞—à–µ –ü—Ä–∞–≤–æ –Ω–∞ –ó–∞—Ö–∏—Å—Ç —Ç–∞ –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ì–∞—Ä–∞–Ω—Ç—ñ—ó",
                     "docs": ["–í–õ–ö", "–î–æ–≤—ñ–¥–∫–∞ –ï–ö–û–ü–§ (–ú–°–ï–ö)", "–ü—Ä–∞–≤–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é"]},
    "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø": {"text": "–û—Ç—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ –≥–æ–¥ —Ä–æ–±–∏–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 3-5 –¥–Ω—ñ–≤ –ø–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è (–í–õ–ö). –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏—Å—è –ø–æ –£–∫—Ä–∞—ó–Ω—ñ.",
                        "docs": ["–¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è", "–î–æ–≤—ñ–¥–∫–∞ (–≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∫)", "–í–õ–ö"]},
    "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø": {"text": "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ –ø–æ–≤–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –ó–°–£.",
                    "docs": ["–ü–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è", "–í–õ–ö", "–†–∞–ø–æ—Ä—Ç–∏ —Ç–∞ –∫–ª–æ–ø–æ—Ç–∞–Ω–Ω—è"]}
}

# Flask
app = Flask(__name__)
user_network_choice = {}  # chat_id -> –º–µ—Ä–µ–∂–∞

# =========================
# –§—É–Ω–∫—Ü—ñ—ó
# =========================
def notify_admin(text):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    for admin_id in ADMIN_IDS:
        if admin_id != 0:
            bot.send_message(admin_id, text)

def send_service_details(chat_id, service_name):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–ª—É–≥—É –∑ INLINE-–∫–Ω–æ–ø–∫–∞–º–∏."""
    service = SERVICES[service_name]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ INLINE-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª—É–≥–∏ - –≤—Å—ñ INLINE
    btn_consultation = telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="consultation")
    btn_payment = telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ USDT", callback_data="start_usdt_payment")
    btn_back_main = telebot.types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    
    markup.row(btn_consultation, btn_payment)
    markup.row(btn_back_main)
    
    doc_text = "\n".join([f"‚Ä¢ {d}" for d in service["docs"]])
    full_text = f"*{service_name}*\n\n{service['text']}\n\n*–î–æ–∫—É–º–µ–Ω—Ç–∏:*\n{doc_text}"
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ INLINE-–∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(chat_id, full_text, parse_mode="Markdown", reply_markup=markup)

def show_main_menu_inline(chat_id):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ inline-–∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    # –ì–æ–ª–æ–≤–Ω—ñ INLINE-–∫–Ω–æ–ø–∫–∏
    btn_services = telebot.types.InlineKeyboardButton("‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏", callback_data="show_services")
    btn_consultation = telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="consultation")
    btn_premium = telebot.types.InlineKeyboardButton("üåü Premium –°—É–ø—Ä–æ–≤—ñ–¥", callback_data="show_premium")
    btn_hotline = telebot.types.InlineKeyboardButton("üìû –ì–∞—Ä—è—á–∞ –õ—ñ–Ω—ñ—è 24/7", callback_data="show_hotline")
    
    markup.add(btn_services, btn_consultation, btn_premium, btn_hotline)
    
    bot.send_message(chat_id, "‚úÖ –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ *–ì–æ–ª–æ–≤–Ω–æ–≥–æ –ú–µ–Ω—é*:", 
                     parse_mode="Markdown", reply_markup=markup)

# =========================
# –ú–µ–Ω—é —Ç–∞ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
# =========================
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    
    # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è InlineKeyboardMarkup
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Inline-–∫–Ω–æ–ø–æ–∫ –∑ callback_data
    btn_services = telebot.types.InlineKeyboardButton("‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏", callback_data="show_services")
    btn_consultation = telebot.types.InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", callback_data="consultation")
    btn_premium = telebot.types.InlineKeyboardButton("üåü Premium –°—É–ø—Ä–æ–≤—ñ–¥", callback_data="show_premium")
    btn_hotline = telebot.types.InlineKeyboardButton("üìû –ì–∞—Ä—è—á–∞ –õ—ñ–Ω—ñ—è 24/7", callback_data="show_hotline")

    markup.add(btn_services, btn_consultation, btn_premium, btn_hotline)
    
    # –¢–ï–ö–°–¢ –ü–†–ò–í–Ü–¢–ê–ù–ù–Ø
    welcome_text = (
        "*Kovalova Stanislava: –í–∞—à —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π —é—Ä–∏–¥–∏—á–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä —É —Å–∫–ª–∞–¥–Ω–∏—Ö —Ä—ñ—à–µ–Ω–Ω—è—Ö.*\n"
        "–í—ñ—Ç–∞—î–º–æ –≤ –ø—Ä–æ—Å—Ç–æ—Ä—ñ, –¥–µ –∑–∞–∫–æ–Ω –ø—Ä–∞—Ü—é—î –Ω–∞ –≤–∞—à –∑–∞—Ö–∏—Å—Ç.\n"
        "–ú–∏ —Ä–æ–∑—É–º—ñ—î–º–æ, —â–æ –ø—Ä–∞–≤–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –≤—ñ–π—Å—å–∫–æ–≤–∏–º –æ–±–ª—ñ–∫–æ–º, –≤–∏—ó–∑–¥–æ–º –∑–∞ –∫–æ—Ä–¥–æ–Ω, "
        "–æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–æ—é –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –ó–°–£ —á–µ—Ä–µ–∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —á–∏ "
        "—Å—ñ–º–µ–π–Ω—ñ –æ–±—Å—Ç–∞–≤–∏–Ω–∏, –≤–∏–º–∞–≥–∞—é—Ç—å –Ω–µ –ª–∏—à–µ –∑–Ω–∞–Ω–Ω—è, –∞ –π –±–µ–∑–¥–æ–≥–∞–Ω–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É.\n\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–ø–æ–Ω—É—î –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ —Å—É–ø—Ä–æ–≤–æ–¥—É:\n"
        "üîπ *–ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å*: –ü–æ–≤–Ω–∞ —Ç–∞ –±–µ–∑—É–º–æ–≤–Ω–∞.\n"
        "üîπ *–ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ—Å—Ç—å*: –í—ñ–¥ –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.\n"
        "üîπ *–†–µ–∑—É–ª—å—Ç–∞—Ç*: –ß—ñ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –≤–∞—à–æ—ó –±–µ–∑–ø–µ–∫–∏."
    )
    
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Inline-–∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(
        chat_id, 
        welcome_text,
        parse_mode="Markdown", 
        reply_markup=markup
    )
    
    # –í–∏–¥–∞–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—É —Å—Ç–∞—Ä—É Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=telebot.types.ReplyKeyboardRemove())
    
    notify_admin(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {chat_id} ({message.from_user.first_name})")

# =========================
# –ú–µ–Ω—é –ü–æ—Å–ª—É–≥ (ReplyKeyboardMarkup)
# =========================
@bot.message_handler(func=lambda m: m.text == "‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏")
def services_handler(message):
    chat_id = message.chat.id
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ—Å–ª—É–≥
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True) 
    markup.row("–í–ò–á–ó–î", "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø")
    markup.row("–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨", "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø")
    markup.row("üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ") # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞–∑–≤—É, —â–æ–± –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏ –≤—ñ–¥ inline-–Ω–∞–∑–∞–¥
    # –û—Å–∫—ñ–ª—å–∫–∏ —Ç—É—Ç —î ReplyKeyboardMarkup, –º–∏ –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó.
    bot.send_message(chat_id, "–ú–∏ –Ω–∞–¥–∞—î–º–æ:", reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏ –∑ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
@bot.message_handler(func=lambda m: m.text in SERVICES.keys())
def service_handler(message):
    # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    bot.send_message(message.chat.id, "–û–±—Ä–∞–Ω–∞ –ø–æ—Å–ª—É–≥–∞:", reply_markup=telebot.types.ReplyKeyboardRemove())
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑ inline-–∫–Ω–æ–ø–∫–∞–º–∏
    send_service_details(message.chat.id, message.text)

# =========================
# –ù–∞–∑–∞–¥ (–¢–µ–∫—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ)
# =========================
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ")
def go_back_to_main_from_services(message):
    chat_id = message.chat.id
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–æ—Å–ª—É–≥
    bot.send_message(chat_id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è...", reply_markup=telebot.types.ReplyKeyboardRemove())
    # –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –Ω–∞ –ì–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω (—Ñ—É–Ω–∫—Ü—ñ—è –∑ inline-–∫–Ω–æ–ø–∫–∞–º–∏)
    show_main_menu_inline(chat_id)

# =========================
# –û–ø–ª–∞—Ç–∞ USDT (ReplyKeyboardMarkup –¥–ª—è –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ)
# =========================
@bot.message_handler(func=lambda m: m.text == "–û–ø–ª–∞—Ç–∞ USDT")
@bot.callback_query_handler(func=lambda call: call.data == "start_usdt_payment")
def choose_network(update):
    """–ü–æ–∫–∞–∑—É—î ReplyKeyboardMarkup –¥–ª—è –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ."""
    if isinstance(update, telebot.types.CallbackQuery):
        chat_id = update.message.chat.id
        bot.answer_callback_query(update.id)
        bot.edit_message_reply_markup(chat_id, update.message.message_id, reply_markup=None) # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ inline
    else:
        chat_id = update.chat.id
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏ (—Å—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞)
        bot.send_message(chat_id, "–û–±—Ä–∞–Ω–æ –æ–ø–ª–∞—Ç—É:", reply_markup=telebot.types.ReplyKeyboardRemove())

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("TRC20", "BSC", "ETH")
    markup.row("üîô –ù–∞–∑–∞–¥") # –¢–µ–∫—Å—Ç–æ–≤–∞ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ

    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ 1 USDT:", reply_markup=markup)

# –¢–µ–∫—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –≤–∏–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ
@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def go_back_from_network_choice(message):
    chat_id = message.chat.id
    
    if chat_id in user_network_choice:
        del user_network_choice[chat_id]
        
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    bot.send_message(chat_id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è...", reply_markup=telebot.types.ReplyKeyboardRemove())
    
    # –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –Ω–∞ –ì–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω
    show_main_menu_inline(chat_id)


@bot.message_handler(func=lambda m: m.text in ["TRC20", "BSC", "ETH"])
def send_wallet_info(message):
    chat_id = message.chat.id
    network = message.text
    user_network_choice[chat_id] = network
    wallet = WALLETS[network]
    text = f"üí≥ –û–ø–ª–∞—Ç–∞ 1 USDT —á–µ—Ä–µ–∑ {network}\n–ê–¥—Ä–µ—Å–∞: `{wallet}`\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–æ—Ç—É TX Hash –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."
    bot.send_message(chat_id, text, parse_mode="Markdown")

# =========================
# –û–±—Ä–æ–±–Ω–∏–∫ Inline-–∫–Ω–æ–ø–æ–∫
# =========================
@bot.callback_query_handler(func=lambda call: call.data in ["show_services", "consultation", "show_premium", "show_hotline", 
                                                            "back_to_main_menu"])
def handle_inline_buttons(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    bot.answer_callback_query(call.id) 
    
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ inline-–∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    try:
        bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None) 
    except Exception:
        pass
        
    if call.data == "show_services":
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –º–µ–Ω—é –ø–æ—Å–ª—É–≥ (–∑ ReplyKeyboardMarkup)
        services_handler(call.message) 
        
    elif call.data == "consultation":
        bot.send_message(chat_id, "üí¨ –î–ª—è *–ø–µ—Ä–≤–∏–Ω–Ω–æ—ó* –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ —Å–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É. –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –í–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", parse_mode="Markdown")

    elif call.data == "show_premium":
        premium_text = (
            "üöÄ *PREMIUM –Æ–†–ò–î–ò–ß–ù–ò–ô –°–£–ü–†–û–í–Ü–î*\n\n"
            "–¶–µ–π –ø–∞–∫–µ—Ç –≤–∫–ª—é—á–∞—î 100% –≥–∞—Ä–∞–Ω—Ç—ñ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–∞ –ø–æ–≤–Ω–∏–π –∑–∞—Ö–∏—Å—Ç.\n"
            "‚Ä¢ –û—Å–æ–±–∏—Å—Ç–∏–π —é—Ä–∏—Å—Ç 24/7.\n"
            "‚Ä¢ –°—É–ø—Ä–æ–≤—ñ–¥ –Ω–∞ –í–õ–ö (–∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ).\n"
            "‚Ä¢ –ï–∫—Å—Ç—Ä–µ–Ω–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (1 –¥–µ–Ω—å).\n"
            "‚Ä¢ –í—Å—ñ –¥–µ—Ä–∂–∞–≤–Ω—ñ –º–∏—Ç–∞ —Ç–∞ –∑–±–æ—Ä–∏ –≤–∫–ª—é—á–µ–Ω—ñ.\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é."
        )
        bot.send_message(chat_id, premium_text, parse_mode="Markdown")

    elif call.data == "show_hotline":
        hotline_text = (
            "üìû *–ì–ê–†–ê–ù–¢–û–í–ê–ù–ê –ì–ê–†–Ø–ß–ê –õ–Ü–ù–Ü–Ø 24/7*\n\n"
            "–û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä—è–º–∏–π –∑–≤'—è–∑–æ–∫ –∑ —é—Ä–∏—Å—Ç–æ–º –¥–ª—è –µ–∫—Å—Ç—Ä–µ–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π. –î–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ —Ä–æ–∑–ø–æ—á–∞–ª–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é.\n\n"
            "–î–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ì–∞—Ä—è—á–æ—ó –õ—ñ–Ω—ñ—ó, –æ–±–µ—Ä—ñ—Ç—å *'Premium –°—É–ø—Ä–æ–≤—ñ–¥'* –∞–±–æ —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑ –æ–¥–Ω–∏–º —ñ–∑ –ø–∞–∫–µ—Ç—ñ–≤ –ø–æ—Å–ª—É–≥."
        )
        bot.send_message(chat_id, hotline_text, parse_mode="Markdown")
        
    elif call.data == "back_to_main_menu":
        # –¶–µ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω –∑ —É—Å—ñ–º–∞ inline-–∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è...", reply_markup=telebot.types.ReplyKeyboardRemove())
        show_main_menu_inline(chat_id)

# =========================
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TX Hash
# =========================
@bot.message_handler(func=lambda m: m.text.startswith("0x") or m.text.startswith("T"))
def check_tx_hash(message):
    tx_hash = message.text.strip()
    chat_id = message.chat.id
    network = user_network_choice.get(chat_id)
    if not network:
        bot.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –¥–ª—è –æ–ø–ª–∞—Ç–∏.")
        return
    try:
        if network == "TRC20":
            url = f"https://apilist.tronscan.org/api/transaction-info?hash={tx_hash}"
            resp = requests.get(url).json()
            to_address = resp.get("to")
            amount = int(resp.get("contractData", {}).get("amount", 0)) / 1_000_000
            confirmed = resp.get("ret", [{}])[0].get("contractRet") == "SUCCESS"
            if confirmed and to_address == WALLETS["TRC20"] and amount == 1:
                bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ 1 USDT TRC20 –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
                notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} —Å–ø–ª–∞—Ç–∏–≤ 1 USDT TRC20. TX: {tx_hash}")
                del user_network_choice[chat_id] # –û—á–∏—Å—Ç–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É
            else:
                bot.send_message(chat_id, "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è")
        else:
            url = f"https://api.bscscan.com/api?module=transaction&action=gettxreceiptstatus&txhash={tx_hash}&apikey={ETH_BSC_API_KEY}" if network == "BSC" else \
                  f"https://api.etherscan.io/api?module=transaction&action=gettxreceiptstatus&txhash={tx_hash}&apikey={ETH_BSC_API_KEY}"
            resp = requests.get(url).json()
            result = resp.get("result")
            status = result.get("status") if isinstance(result, dict) else result
            if status == "1":
                bot.send_message(chat_id, f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è {tx_hash} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ {network}!")
                notify_admin(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} —Å–ø–ª–∞—Ç–∏–≤ 1 USDT {network}. TX: {tx_hash}")
                del user_network_choice[chat_id] # –û—á–∏—Å—Ç–∫–∞ –≤–∏–±–æ—Ä—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É
            else:
                bot.send_message(chat_id, f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ {network}")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ {network}: {e}")

# =========================
# Flask webhook
# =========================
@app.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    # –¶–µ–π –∫–æ–¥ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ª–∏—à–µ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –¥–µ–ø–ª–æ—ó
    # bot.remove_webhook()
    # bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")
    return "Bot is running via webhook", 200

# =========================
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# =========================
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ bot.polling(),
    # –∞–ª–µ –¥–ª—è –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∏, —è–∫ Render, –ø–æ—Ç—Ä—ñ–±–µ–Ω Flask
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
