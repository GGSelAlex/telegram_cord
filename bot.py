import telebot
import os
from telebot import types
from flask import Flask, request

# --- –¢–æ–∫–µ–Ω —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑ Environment Variables ---
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(os.getenv("ADMIN1_ID")), int(os.getenv("ADMIN2_ID"))]

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- Flask Webhook ---
@app.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_str = request.stream.read().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")
    return "Bot is running via webhook", 200

# --- –°—Ç–∞—Ä—Ç —ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ---
@bot.message_handler(commands=['start'])
def start(message):
    # –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    welcome_text = (
        "üíº *–Æ—Ä–∏–¥–∏—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏ Kovalova Stanislava*\n\n"
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –ø—Ä–µ–º—ñ—É–º —é—Ä–∏–¥–∏—á–Ω–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ.\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ üëá"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏", "üïí –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.row("‚ÑπÔ∏è –ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é", "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
    bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown", reply_markup=markup)

    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    admin_msg = f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{message.from_user.username or '–ù–µ–º–∞—î username'}, ID: {message.from_user.id}"
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, admin_msg)

# --- –ü–æ—Å–ª—É–≥–∏ ---
@bot.message_handler(func=lambda m: m.text == "‚öñÔ∏è –ü–æ—Å–ª—É–≥–∏")
def services(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–í–ò–á–ó–î", "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø")
    markup.row("–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨", "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø")
    markup.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    text = (
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ:\n"
        "üîπ –í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω\n"
        "üîπ –í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –º–æ–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó\n"
        "üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ\n"
        "üîπ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑—ñ —Å–ª—É–∂–±–∏ –≤ –ó–°–£"
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

# --- –î–µ—Ç–∞–ª—ñ –ø–æ—Å–ª—É–≥ ---
def service_details_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", url="https://t.me/uristcord"))
    markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ USDT TRC20", url="https://your_payment_link_here"))
    return markup

@bot.message_handler(func=lambda m: m.text == "–í–ò–á–ó–î")
def service_vyezd(message):
    text = (
        "üí≥ *–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω*\n\n"
        "–ë—ñ–ª–∏–π –∫–≤–∏—Ç–æ–∫: –í–∞—à —à–ª—è—Ö –¥–æ —Å–≤–æ–±–æ–¥–∏ —Ç–∞ —Å–ø–æ–∫–æ—é.\n"
        "–î–æ–∫—É–º–µ–Ω—Ç–∏: –¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è, –í–õ–ö, –î–æ–≤—ñ–¥–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –≤–∏—ó–∑–¥—É."
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=service_details_markup())

@bot.message_handler(func=lambda m: m.text == "–Ü–ù–í–ê–õ–Ü–î–ù–Ü–°–¢–¨")
def service_invalid(message):
    text = (
        "üí≥ *–Ü–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å*\n\n"
        "–ì—Ä—É–ø–∞ —ñ–Ω–≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ (–Ü–Ü –∞–±–æ –Ü–Ü–Ü) —Ç–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –≥–∞—Ä–∞–Ω—Ç—ñ—ó.\n"
        "–î–æ–∫—É–º–µ–Ω—Ç–∏: –õ–õ–ö, –¥–æ–≤—ñ–¥–∫–∞ –ï–ö–û–ü–§(–ú–°–ï–ö), –ø—Ä–∞–≤–æ –Ω–∞ –ø–µ–Ω—Å—ñ—é."
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=service_details_markup())

@bot.message_handler(func=lambda m: m.text == "–í–Ü–î–¢–ï–†–ú–Ü–ù–£–í–ê–ù–ù–Ø")
def service_otst(message):
    text = (
        "üí≥ *–í—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è*\n\n"
        "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∫ –ø–æ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è.\n"
        "–î–æ–∫—É–º–µ–Ω—Ç–∏: –¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è, –î–æ–≤—ñ–¥–∫–∞ (–≤—ñ–¥—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Ä—ñ–∫), –í–õ–ö."
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=service_details_markup())

@bot.message_handler(func=lambda m: m.text == "–ó–í–Ü–õ–¨–ù–ï–ù–ù–Ø")
def service_release(message):
    text = (
        "üí≥ *–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –ó–°–£*\n\n"
        "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ —é—Ä–∏–¥–∏—á–Ω—ñ –≥–∞—Ä–∞–Ω—Ç—ñ—ó.\n"
        "–î–æ–∫—É–º–µ–Ω—Ç–∏: –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä —Ç–∞ –ø–æ–≤–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥."
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=service_details_markup())

# --- –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é ---
@bot.message_handler(func=lambda m: m.text == "üïí –ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
def consult(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    markup.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    markup.row("–ù–∞–ø–∏—Å–∞—Ç–∏ —é—Ä–∏—Å—Ç—É")
    bot.send_message(
        message.chat.id,
        "üìû –î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –∑–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ —é—Ä–∏—Å—Ç–æ–º:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
def send_phone(message):
    bot.send_message(
        message.chat.id,
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True),
            types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        )
    )

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact is not None:
        phone = message.contact.phone_number
        for admin_id in ADMIN_IDS:
            bot.send_message(admin_id, f"–ù–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {phone}\nID: {message.from_user.id}")

@bot.message_handler(func=lambda m: m.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–ù–∞–ø–∏—Å–∞—Ç–∏ —é—Ä–∏—Å—Ç—É"])
def go_back(message):
    start(message)

# --- –ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é ---
@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é")
def about(message):
    bot.send_message(
        message.chat.id,
        "–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ 2022 —Ä–æ–∫—É –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –∑–∞—Ö–∏—Å—Ç—É —á–æ–ª–æ–≤—ñ–∫—ñ–≤.\n"
        "Kovalova Legal ‚Äî –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å —é—Ä–∏–¥–∏—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏."
    )

# --- –ö–æ–Ω—Ç–∞–∫—Ç–∏ ---
@bot.message_handler(func=lambda m: m.text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
def contact(message):
    bot.send_message(
        message.chat.id,
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ —é—Ä–∏—Å—Ç—É:\nüëâ [–ù–∞–ø–∏—Å–∞—Ç–∏ –ö–æ–≤–∞–ª–æ–≤—É](https://t.me/uristcord)",
        parse_mode="Markdown"
    )

# --- –ó–∞–ø—É—Å–∫ Flask ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
